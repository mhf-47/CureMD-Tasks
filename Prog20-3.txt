I understand your preference for simplicity. To avoid using a 2D array, we can modify the program to use two 1D arrays instead. Here's the updated code:

```csharp
using System;

namespace LongestCommonSubsequence
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("Enter the first string:");
            string str1 = Console.ReadLine();
            Console.WriteLine("Enter the second string:");
            string str2 = Console.ReadLine();

            int m = str1.Length;
            int n = str2.Length;

            int[] dp = new int[n + 1];

            // Build the DP array to find the length of LCS
            for (int i = 0; i < m; i++)
            {
                int prev = 0; // Store the value of dp[i][j-1] (previous column)
                for (int j = 1; j <= n; j++)
                {
                    int current = dp[j]; // Store the value of dp[i-1][j-1] (previous row, previous column)
                    if (str1[i] == str2[j - 1])
                        dp[j] = prev + 1;
                    else
                        dp[j] = Math.Max(dp[j - 1], current);
                    prev = current;
                }
            }

            int lcsLength = dp[n];

            char[] lcs = new char[lcsLength];
            int k = lcsLength - 1;
            int p = m - 1;
            int q = n - 1;

            while (k >= 0 && p >= 0 && q >= 0)
            {
                if (str1[p] == str2[q] && dp[q + 1] == dp[q] + 1)
                {
                    lcs[k] = str1[p];
                    k--;
                    p--;
                    q--;
                }
                else if (p > 0 && (q == 0 || dp[q] < dp[q - 1]))
                {
                    p--;
                }
                else
                {
                    q--;
                }
            }

            string longestCommonSubsequence = new string(lcs);

            Console.WriteLine("Longest Common Subsequence: " + longestCommonSubsequence);
        }
    }
}
```

In this updated version:

- A 1D array `dp` is used to store the length of the longest common subsequence, and we compute it iteratively.

- We still use two pointers `p` and `q` to traverse the strings `str1` and `str2`, and we store the length of the LCS in `lcsLength`.

- We then construct the LCS string directly using the `lcs` character array, similar to the previous code.

This updated code simplifies the use of arrays while maintaining the core logic for finding the LCS.